#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "pilha.h"

int main(void) {

  char texto[1000];
  Pilha pilha;
  create_pilha(&pilha);

  fgets(texto,999,stdin);
  if(texto[strlen(texto)-1] == '\n')
    texto[strlen(texto)-1] = '\0';
  if(texto[strlen(texto)-1] == '\r')
    texto[strlen(texto)-1] = '\0';

  for(int i=0; i<strlen(texto);i++){

    switch(texto[i]){
      case '#':
        pop(&pilha);
      break;
      case '/':
        create_pilha(&pilha);
      break;
      case '@':
        print_pilha(&pilha);
        create_pilha(&pilha);
      break;

      default:{
          bool empilhou = push(&pilha, texto[i]);
          if(!empilhou){
            print_pilha(&pilha);
            create_pilha(&pilha);
          }
      }
        
    }
  }

  print_pilha(&pilha);




  return 0;
}

#include "pilha.h"
#include <stdio.h>
#include <stdlib.h>

void create_pilha(Pilha *p){
  p->topo = 0;
}

bool push(Pilha *p, char dado){
  if(p->topo == MAX){
    return false;
  }else{
    p->dados[p->topo++] = dado;
    return true;
  }
}

char pop(Pilha *p){
  if(p->topo == 0)
    return '\0';

  p->topo--;
  return p->dados[p->topo];
}

int size_pilha(Pilha *p){
  return p->topo;
}

void print_pilha(Pilha *p){

  for(int i=0; i<p->topo;i++){
    printf("%c", p->dados[i]);
  }

  printf("\n");

}

#define MAX 70
#include <stdbool.h>

typedef struct Pilha{
  char dados[MAX];
  int topo;
}Pilha;

void create_pilha(Pilha *p);

bool push(Pilha *p, char dado);

char pop(Pilha *p);

int size_pilha(Pilha *p);

void print_pilha(Pilha *p);
